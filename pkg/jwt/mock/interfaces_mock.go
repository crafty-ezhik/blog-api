// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mock/interfaces_mock.go
//

// Package mock_jwt is a generated GoMock package.
package mock_jwt

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockBlackListStorage is a mock of BlackListStorage interface.
type MockBlackListStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBlackListStorageMockRecorder
	isgomock struct{}
}

// MockBlackListStorageMockRecorder is the mock recorder for MockBlackListStorage.
type MockBlackListStorageMockRecorder struct {
	mock *MockBlackListStorage
}

// NewMockBlackListStorage creates a new mock instance.
func NewMockBlackListStorage(ctrl *gomock.Controller) *MockBlackListStorage {
	mock := &MockBlackListStorage{ctrl: ctrl}
	mock.recorder = &MockBlackListStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlackListStorage) EXPECT() *MockBlackListStorageMockRecorder {
	return m.recorder
}

// AddToBlackList mocks base method.
func (m *MockBlackListStorage) AddToBlackList(token string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToBlackList", token, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToBlackList indicates an expected call of AddToBlackList.
func (mr *MockBlackListStorageMockRecorder) AddToBlackList(token, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToBlackList", reflect.TypeOf((*MockBlackListStorage)(nil).AddToBlackList), token, ttl)
}

// IsBlackListed mocks base method.
func (m *MockBlackListStorage) IsBlackListed(token string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBlackListed", token)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBlackListed indicates an expected call of IsBlackListed.
func (mr *MockBlackListStorageMockRecorder) IsBlackListed(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBlackListed", reflect.TypeOf((*MockBlackListStorage)(nil).IsBlackListed), token)
}

// MockTokenVersionStorage is a mock of TokenVersionStorage interface.
type MockTokenVersionStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTokenVersionStorageMockRecorder
	isgomock struct{}
}

// MockTokenVersionStorageMockRecorder is the mock recorder for MockTokenVersionStorage.
type MockTokenVersionStorageMockRecorder struct {
	mock *MockTokenVersionStorage
}

// NewMockTokenVersionStorage creates a new mock instance.
func NewMockTokenVersionStorage(ctrl *gomock.Controller) *MockTokenVersionStorage {
	mock := &MockTokenVersionStorage{ctrl: ctrl}
	mock.recorder = &MockTokenVersionStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenVersionStorage) EXPECT() *MockTokenVersionStorageMockRecorder {
	return m.recorder
}

// GetVersion mocks base method.
func (m *MockTokenVersionStorage) GetVersion(userID uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", userID)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockTokenVersionStorageMockRecorder) GetVersion(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockTokenVersionStorage)(nil).GetVersion), userID)
}

// IncrementVersion mocks base method.
func (m *MockTokenVersionStorage) IncrementVersion(userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementVersion", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementVersion indicates an expected call of IncrementVersion.
func (mr *MockTokenVersionStorageMockRecorder) IncrementVersion(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementVersion", reflect.TypeOf((*MockTokenVersionStorage)(nil).IncrementVersion), userID)
}
