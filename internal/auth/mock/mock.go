// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mock/mock.go
//

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	reflect "reflect"

	auth "github.com/crafty-ezhik/blog-api/internal/auth"
	jwt "github.com/crafty-ezhik/blog-api/pkg/jwt"
	fiber "github.com/gofiber/fiber/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
	isgomock struct{}
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthService) Login(data *auth.LoginRequest) (*auth.LoginResponse, *fiber.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", data)
	ret0, _ := ret[0].(*auth.LoginResponse)
	ret1, _ := ret[1].(*fiber.Cookie)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), data)
}

// Logout mocks base method.
func (m *MockAuthService) Logout(tokenStr string) (*fiber.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", tokenStr)
	ret0, _ := ret[0].(*fiber.Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthServiceMockRecorder) Logout(tokenStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthService)(nil).Logout), tokenStr)
}

// Refresh mocks base method.
func (m *MockAuthService) Refresh(tokenStr string) (*jwt.Tokens, *fiber.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", tokenStr)
	ret0, _ := ret[0].(*jwt.Tokens)
	ret1, _ := ret[1].(*fiber.Cookie)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Refresh indicates an expected call of Refresh.
func (mr *MockAuthServiceMockRecorder) Refresh(tokenStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAuthService)(nil).Refresh), tokenStr)
}

// Register mocks base method.
func (m *MockAuthService) Register(data *auth.RegisterRequest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthServiceMockRecorder) Register(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthService)(nil).Register), data)
}
