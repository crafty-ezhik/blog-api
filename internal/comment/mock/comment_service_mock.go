// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mock/comment_service_mock.go
//

// Package mock_comment is a generated GoMock package.
package mock_comment

import (
	reflect "reflect"

	comment "github.com/crafty-ezhik/blog-api/internal/comment"
	gomock "go.uber.org/mock/gomock"
)

// MockCommentService is a mock of CommentService interface.
type MockCommentService struct {
	ctrl     *gomock.Controller
	recorder *MockCommentServiceMockRecorder
	isgomock struct{}
}

// MockCommentServiceMockRecorder is the mock recorder for MockCommentService.
type MockCommentServiceMockRecorder struct {
	mock *MockCommentService
}

// NewMockCommentService creates a new mock instance.
func NewMockCommentService(ctrl *gomock.Controller) *MockCommentService {
	mock := &MockCommentService{ctrl: ctrl}
	mock.recorder = &MockCommentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentService) EXPECT() *MockCommentServiceMockRecorder {
	return m.recorder
}

// CreateCommentByPostID mocks base method.
func (m *MockCommentService) CreateCommentByPostID(postID, authorID uint, arg2 *comment.CreateCommentRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentByPostID", postID, authorID, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCommentByPostID indicates an expected call of CreateCommentByPostID.
func (mr *MockCommentServiceMockRecorder) CreateCommentByPostID(postID, authorID, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentByPostID", reflect.TypeOf((*MockCommentService)(nil).CreateCommentByPostID), postID, authorID, arg2)
}

// DeleteComment mocks base method.
func (m *MockCommentService) DeleteComment(commentID, PostID, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", commentID, PostID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentServiceMockRecorder) DeleteComment(commentID, PostID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentService)(nil).DeleteComment), commentID, PostID, userID)
}

// GetCommentsByPostID mocks base method.
func (m *MockCommentService) GetCommentsByPostID(postID, userID uint) (*comment.GetCommentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByPostID", postID, userID)
	ret0, _ := ret[0].(*comment.GetCommentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByPostID indicates an expected call of GetCommentsByPostID.
func (mr *MockCommentServiceMockRecorder) GetCommentsByPostID(postID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByPostID", reflect.TypeOf((*MockCommentService)(nil).GetCommentsByPostID), postID, userID)
}

// UpdateComment mocks base method.
func (m *MockCommentService) UpdateComment(commentID, PostID, userID uint, updatedFields *comment.UpdateCommentRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", commentID, PostID, userID, updatedFields)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentServiceMockRecorder) UpdateComment(commentID, PostID, userID, updatedFields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentService)(nil).UpdateComment), commentID, PostID, userID, updatedFields)
}
