// Code generated by MockGen. DO NOT EDIT.
// Source: jwt.go
//
// Generated by this command:
//
//	mockgen -source=jwt.go -destination=mock/jwt_mock.go
//

// Package mock_jwt is a generated GoMock package.
package mock_jwt

import (
	reflect "reflect"

	jwt "github.com/crafty-ezhik/blog-api/pkg/jwt"
	gomock "go.uber.org/mock/gomock"
)

// MockJWTInterface is a mock of JWTInterface interface.
type MockJWTInterface struct {
	ctrl     *gomock.Controller
	recorder *MockJWTInterfaceMockRecorder
	isgomock struct{}
}

// MockJWTInterfaceMockRecorder is the mock recorder for MockJWTInterface.
type MockJWTInterfaceMockRecorder struct {
	mock *MockJWTInterface
}

// NewMockJWTInterface creates a new mock instance.
func NewMockJWTInterface(ctrl *gomock.Controller) *MockJWTInterface {
	mock := &MockJWTInterface{ctrl: ctrl}
	mock.recorder = &MockJWTInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTInterface) EXPECT() *MockJWTInterfaceMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockJWTInterface) GenerateToken(userID uint, tokenType jwt.TokenType) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", userID, tokenType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockJWTInterfaceMockRecorder) GenerateToken(userID, tokenType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockJWTInterface)(nil).GenerateToken), userID, tokenType)
}

// Logout mocks base method.
func (m *MockJWTInterface) Logout(refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockJWTInterfaceMockRecorder) Logout(refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockJWTInterface)(nil).Logout), refreshToken)
}

// Refresh mocks base method.
func (m *MockJWTInterface) Refresh(refreshToken string) (*jwt.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", refreshToken)
	ret0, _ := ret[0].(*jwt.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockJWTInterfaceMockRecorder) Refresh(refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockJWTInterface)(nil).Refresh), refreshToken)
}

// VerifyToken mocks base method.
func (m *MockJWTInterface) VerifyToken(tokenString string) (*jwt.JWTData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", tokenString)
	ret0, _ := ret[0].(*jwt.JWTData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockJWTInterfaceMockRecorder) VerifyToken(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockJWTInterface)(nil).VerifyToken), tokenString)
}
