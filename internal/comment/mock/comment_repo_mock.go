// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mock/comment_repo_mock.go
//

// Package mock_comment is a generated GoMock package.
package mock_comment

import (
	reflect "reflect"

	models "github.com/crafty-ezhik/blog-api/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockCommentRepository is a mock of CommentRepository interface.
type MockCommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepositoryMockRecorder
	isgomock struct{}
}

// MockCommentRepositoryMockRecorder is the mock recorder for MockCommentRepository.
type MockCommentRepositoryMockRecorder struct {
	mock *MockCommentRepository
}

// NewMockCommentRepository creates a new mock instance.
func NewMockCommentRepository(ctrl *gomock.Controller) *MockCommentRepository {
	mock := &MockCommentRepository{ctrl: ctrl}
	mock.recorder = &MockCommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepository) EXPECT() *MockCommentRepositoryMockRecorder {
	return m.recorder
}

// CreateCommentByPostID mocks base method.
func (m *MockCommentRepository) CreateCommentByPostID(comment *models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentByPostID", comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCommentByPostID indicates an expected call of CreateCommentByPostID.
func (mr *MockCommentRepositoryMockRecorder) CreateCommentByPostID(comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentByPostID", reflect.TypeOf((*MockCommentRepository)(nil).CreateCommentByPostID), comment)
}

// DeleteCommentByCommentAndPostID mocks base method.
func (m *MockCommentRepository) DeleteCommentByCommentAndPostID(comment *models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentByCommentAndPostID", comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommentByCommentAndPostID indicates an expected call of DeleteCommentByCommentAndPostID.
func (mr *MockCommentRepositoryMockRecorder) DeleteCommentByCommentAndPostID(comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentByCommentAndPostID", reflect.TypeOf((*MockCommentRepository)(nil).DeleteCommentByCommentAndPostID), comment)
}

// FindCommentsByPostID mocks base method.
func (m *MockCommentRepository) FindCommentsByPostID(comment *models.Comment) ([]models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCommentsByPostID", comment)
	ret0, _ := ret[0].([]models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCommentsByPostID indicates an expected call of FindCommentsByPostID.
func (mr *MockCommentRepositoryMockRecorder) FindCommentsByPostID(comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCommentsByPostID", reflect.TypeOf((*MockCommentRepository)(nil).FindCommentsByPostID), comment)
}

// UpdateCommentByCommentAndPostID mocks base method.
func (m *MockCommentRepository) UpdateCommentByCommentAndPostID(comment *models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCommentByCommentAndPostID", comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCommentByCommentAndPostID indicates an expected call of UpdateCommentByCommentAndPostID.
func (mr *MockCommentRepositoryMockRecorder) UpdateCommentByCommentAndPostID(comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommentByCommentAndPostID", reflect.TypeOf((*MockCommentRepository)(nil).UpdateCommentByCommentAndPostID), comment)
}
